/*espresso32   v01
this program will control a vibe pump in an espresso machine
It was developed with an Expobar Office Control.  A prosumer HX machine with a modified E61 group head.
I wrote it because I wanted prefusion and to be able to have better control over pressure to mimic a lever machine

This program runs on a ESP32.  
The ESP32 is connected to     2x16 LCD display   four push buttons under the display   two thermocouples to read group head temperature and exterior boiler temperature (via I2C)   EEPROM memory to store shot profiles/parameters, and to store measurements taken during (via I2C)    DAC output to send pump power level to an Arduino running tbd   Digmesa Flow meter PN TBD   Pressure sensor PN TBD   five inputs to read Expobar button status
If the first button Expobar button  
Use Arrays to setup parameters
1.  Small array with constants that would rarely change
During shot parameters: Max pump power, min pump power, max flow rate, min flow rate, max pressure,  min pressure, pulse power, pulse flow
2.  Five Shot parameter arrays.  One for each of the first five shot modes.  Each mode has its own 10 element array
Mode (1)   Time preinfusion, power preinfusion, rampup time, shot power, shot time, rampdown time Prefusion with power control
Mode (2)   rampup time, shot power, shot time, rampdown time No prefusion with power control
Mode (3)  Time preinfusion, power preinfusion, rampup time, shot flow, shot time, rampdown time Prefusion with flow control
Mode (4)   rampup time, shot flow, shot time, rampdown time No prefusion with flow control
Mode (5)  Preinfusion pressure, power preinfusion, rampup time, shot flow, shot time, rampdown time Pressure prefusion with flow control
Mode (6) = Mode 1 with pulsing power
Mode (7) = Mode 2 with pulsing power
Mode (8) = Mode 3 with pulsing flow
Mode (9) = Mode 4 with pulsing flow
Mode (10) = Mode 5 with pulsing power

X = Don't care, not used

Mode definition
1 = timed preinfusion, rampup to shot power, constant power for x secs, ramp down
2 = rampup to shot power, constant power for x secs, ramp down
3 = timed preinfusion, rampup to shot flow, constant flow for x secs, ramp down
4 = rampup to shot flow, constant flow for x secs, ramp down
5= preinfusion to x pressure, rampup to shot flow, constant flow for x secs, ramp down
***************************************************************************************
Storing arrays
Added an external i2c eeprom, 24LC256.  This holds 256 k bits, or 64k bytes.
example
https://github.com/zacharyvincze/esp32-i2c-eeprom/blob/master/main/eeprom.c 




**************************************************************************************** 
Adding a pressure gauge
Teflon tubing is 4x6mm, macmaster PN 5557K33    $2.70/ft
https://www.mcmaster.com/catalog/127/175 
John Guest fittings
Part No.	TUBE OD
PM0206E	6mm
https://www.johnguest.com/product/metric-size-tube-to-tube-fittings/equal-tee-6/
Works to 16 bar at 20C, 10 bar at 65C
Mcmaster push to connect
https://www.mcmaster.com/6mm-tee-connectors/push-to-connect-tube-fittings-for-air-and-water/
works to 20bar, $6 for tee
Or get 	7699N148 with two 6mm push and one 1/8 npt male connector
	45525K561 is f/f coupler for 1/8 npt  $5.29 	4464K211	$4.53
Or use push to connect tee, and teflon tube to 6mm to 1/8 npt coupler to transducer
	5305K398	$15.13   6mm push to 1/8 npt female
brass fip female elbow $5, https://www.homedepot.com/p/Everbilt-1-8-in-FIP-90-Degree-Brass-Elbow-Fitting-801949/300096773    or straight $3.60 https://www.lowes.com/pd/B-K-1-8-in-Threaded-Coupling-Fitting/1000505565

Connecting to 1/8 npt pressure transducer, get 200 psi version



********************************************************************
4n25/26 info
http://www.martyncurrey.com/activating-the-shutter-release/ 
CTR > 20
If = 10 ma target
120 VAC   Had a 10k, 7w resistor.
120v/10k = 12ma
120*120/12k=1.2 watts

With CTR of 20, 12ma * 0.2 = 2.4ma output current

On the output side, I used a 8.1k pullup resistor to 5V
5/8100= 0.6ma  That's how much current I need to pull the signal down

 Arduino GPIO output current is 40mA max
aqh2223 is 10ma max input current required
***********************************************************************
*/


// this library included with the arduino distribution
#include <Wire.h>
//Add liquid crystal lib here

// these "contributed" libraries must be installed in your sketchbook's arduino/libraries folder
#include <TypeK.h>
#include <cADC.h>
#include "user.h"


#define BANNER_BRBN "espress32 V01"

#define BAUD 115200  // serial baud rate

// LCD output strings
char smin[3],ssec[3],st1[6],st2[6],st3[6],st4[6];

// ---------------------------------- LCD interface definition
#ifdef I2C_LCD
#define BACKLIGHT_PIN 15
#define RS 13
#define ENABLE 12
#define D4 14
#define D5 27
#define D6 26
#define D7 25
LiquidCrystal lcd( RS, ENABLE, D4, D5, D6, D7 ); // standard 4-bit if

struct Button {
  const uint8_t PIN;
  uint32_t numberKeyPresses;
  bool pressed;
};
Button button1 = {32, 0, false};

//define GPIO pins on ESP32
#define PUSH02 33
#define PUSH03 34
#define PUSH04 35
#define Expobar1 36
#define Expobar2 15
#define Expobar3 2
#define Expobar4 0
#define Flow1 4
#define Flow2 16
#define PumpOn 19
#define I2C01Da 21
#define I2C01Cl 22

// used in main loop
float timestamp = 0;
//boolean first;
uint32_t nextLoop;
float start_shot_time = 0;
float shot_time = 0;
boolean shot_start = false;
boolean back_flag = true;
boolean button_pushed = false;
int ShotMode = 0;  
int ShotState = 0;
int PreTime = 10;  //Preinfusion default time
int PrePower = 20;  //Preinfusion pump power
int Ramp = 2;  // default time to ramp up power
int Full = 30;  // default time at full power

/*Shot Mode, PreTime, Ramp time, Full time, 

Shot Mode = 0 full power, 1 simple timed, 2 pulse timed, 3 simple flow, 4 pulse flow


*/


//interrupts
//attachInterrupt(GPIOPin, ISR, Mode);
/*ISR – Is the name of the function that will be called every time the interrupt is triggered.

Mode – Defines when the interrupt should be triggered. Five constants are predefined as valid values:
modes are LOW, HIGH, CHANGE, FALLING, RISING

void IRAM_ATTR ISR() {
    Statements;
}

*/

void IRAM_ATTR isr_but1() {
  portENTER_CRITICAL_ISR(&mux);
  button1.numberKeyPresses += 1;
  button1.pressed = true;
  portEXIT_CRITICAL_ISR(&mux);
}

/////////////////////////////////////////////////////////////////////
void setup()
{
  delay(100);
  Wire.begin(); 
  pinMode (BACKLIGHT_PIN, OUTPUT);
  pinMode(button1.PIN, INPUT_PULLUP);

  pinMode (PUSH02, INPUT);
  pinMode (PUSH03, INPUT);
  pinMode (PUSH04, INPUT);
  pinMode (Expobar1, INPUT);
  pinMode (Expobar2, INPUT);
  pinMode (Expobar3, INPUT);
  pinMode (Expobar4, INPUT);
  pinMode (Flow1, INPUT);
  pinMode (Flow2, INPUT);
  pinMode (PumpOn, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(button1.PIN), isr_but1, FALLING);

  lcd.begin(16, 2);
//  BACKLIGHT;
  lcd.setCursor( 0, 0 );
  lcd.print( BANNER_BRBN ); // display version banner
  Serial.begin(BAUD);
  PumpPower = 255;   //255 = full power on DAC
  StartPump = false
  ShotState = 0;
  RampUpTime = PreTime + Ramp;
  FullTime = PreTime + Ramp + Full;

/////////////////////////  Analog output on GPIO pin
//https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/dac.html 
#include <driver/dac.h>

//GPIO25 is DAC Ch 1 
//0.78 of VDD_A voltage (VDD * 200 / 255). For VDD_A 3.3V, this is 2.59V
    dac_output_enable(DAC_CHANNEL_1);
    dac_output_voltage(DAC_CHANNEL_1, 200);


/*
Interrupt rountines
Interrupt on start of pump, StartPump = true;
Interrupt for buttons?  
but 1 ShotMode = true;
but 2 ShotMode = false;


*/






/*  Main loop
int TempPower;

//Check for button to change to shot mode
if (ShotMode && StartPump) {
  StartShot = millisecs(); //Set start shot time
  ShotState++;
}

if (Mode==1){
if (ShotState <= 3) {
  ShotState++;
}
else if (ShotState <= PreTime) {
  ShotState++;
  PumpPower = PrePower;
  TempPower=PumpPower;
}
else if (ShotState <= RampUpTime) {
  ShotState++;
  TempPower=PumpPower+20;
  PumpPower = TempPower;
}
else if (ShotState <= FullTime) {
  ShotState++;
  PumpPower = FullPower;
}
else {  //ramp shot down
  TempPower=PumpPower-20;
  PumpPower = TempPower;
}
}

*/






